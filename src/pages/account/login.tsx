import Head from "next/head";
import styles from "../../styles/login.module.scss";
import {
  TextInput,
  PasswordInput,
  Checkbox,
  Anchor,
  Paper,
  Title,
  Text,
  Container,
  Group,
  Button,
} from "@mantine/core";
import { GetServerSideProps } from "next";
import { useForm } from "@mantine/form";
import { useDispatch, useSelector, TypedUseSelectorHook } from "react-redux";
import { login } from "../../state/authSlice";
import Link from "next/link";
import { AppDispatch } from "../../state";
import { RootState } from "../../state/authType";

// kata

// export type RootState = {
//   auth: {
//     user: {};
//     error: string;
//     token: string;
//   };
// };

export const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;

// kata

export default function Login() {
  const dispatch: AppDispatch = useDispatch();
  // 分割代入
  const { user, error } = useTypedSelector((state) => state.auth);
  // const { user, error } = useSelector((state) => state.auth);

  const form = useForm({
    initialValues: {
      email: "",
      password: "",
    },

    validate: {
      email: (val) => {
        if (/^\S+@\S+$/.test(val)) {
          return null;
        } else if (val.length === 0) {
          return "Please input email";
        } else {
          return "Invalid email";
        }
      },

      password: (val) => {
        if (val.length === 0) {
          return "Please input password";
        } else if (val.length <= 6) {
          return "Password should include at least 6 characters";
        } else {
          return null;
        }
      },
    },
  });

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container className={styles.center} size={420}>
        <Title
          align="center"
          sx={(theme) => ({
            fontFamily: `Greycliff CF, ${theme.fontFamily}`,
            fontWeight: 900,
          })}
        >
          Welcome back!
        </Title>
        <Text color="dimmed" size="sm" align="center" mt={5}>
          Do not have an account yet?{" "}
          <Link href="/account/signup" className={styles.anchor}>
            Create account
          </Link>
        </Text>

        <Paper withBorder shadow="md" p={30} mt={30} radius="md">
          <form
            onSubmit={form.onSubmit((values) => {
              // console.log(values);

              const email = values.email;
              const password = values.password;
              dispatch(login({ email, password }));
            })}
          >
            <TextInput
              label="Email"
              placeholder="you@mantine.dev"
              // error={form.errors.email && "Invalid email"}
              // value={form.values.email}
              // onChange={(event) =>
              //   form.setFieldValue("email", event.currentTarget.value)
              // }
              {...form.getInputProps("email")}
            />
            <PasswordInput
              label="Password"
              placeholder="Your password"
              mt="md"
              // value={form.values.password}
              // onChange={(event) =>
              //   form.setFieldValue("password", event.currentTarget.value)
              // }
              // error={
              //   form.errors.password &&
              //   "Password should include at least 6 characters"
              // }
              {...form.getInputProps("password")}
            />
            <Group position="apart" mt="lg">
              <Checkbox label="Remember me" sx={{ lineHeight: 1 }} />
              <Anchor<"a">
                onClick={(event) => event.preventDefault()}
                href="#"
                size="sm"
              >
                Forgot password?
              </Anchor>
            </Group>
            <Button type="submit" fullWidth mt="xl">
              Sign in
            </Button>
          </form>
          {error && <p className={styles.error}>{error}</p>}
        </Paper>
      </Container>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const resolvedUrl = context.resolvedUrl;
  return {
    props: {
      resolvedUrl,
    },
  };
};
