import Head from "next/head";
import styles from "../../styles/login.module.scss";
import {
  TextInput,
  PasswordInput,
  Checkbox,
  Anchor,
  Paper,
  Title,
  Text,
  Container,
  Group,
  Button,
} from "@mantine/core";
import { GetServerSideProps } from "next";
import { useForm } from "@mantine/form";
// import { useDispatch, useSelector, TypedUseSelectorHook } from "react-redux";
// import { login } from "../../state/authSlice";
import Link from "next/link";
// import { AppDispatch } from "../../state";
// import { RootState } from "../../state/authType";
// import { useRouter } from "next/router";
import { useContext } from "react";
import AuthContext from "../../context/authContext";
import { useRouter } from "next/router";
import { useState } from "react";

// export const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;

export default function Login() {
  // const dispatch: AppDispatch = useDispatch();
  // const { user, error } = useTypedSelector((state) => state.auth);
  // const router = useRouter();
  const { user, login, error } = useContext(AuthContext);
  const router = useRouter();
  const [loading, setLoading] = useState(false);

  const form = useForm({
    initialValues: {
      email: "",
      password: "",
    },

    validate: {
      email: (val) => {
        if (/^\S+@\S+$/.test(val)) {
          return null;
        } else if (val.length === 0) {
          return "Please input email";
        } else {
          return "Invalid email";
        }
      },

      password: (val) => {
        if (val.length === 0) {
          return "Please input password";
        } else if (val.length <= 6) {
          return "Password should include at least 6 characters";
        } else {
          return null;
        }
      },
    },
  });

  user && router.push("/");

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container className={styles.center} size={420}>
        <Title
          align="center"
          sx={(theme) => ({
            fontFamily: `Greycliff CF, ${theme.fontFamily}`,
            fontWeight: 900,
          })}
        >
          Welcome back!
        </Title>
        <Text color="dimmed" size="sm" align="center" mt={5}>
          Do not have an account yet?{" "}
          <Link href="/account/signup" className={styles.anchor}>
            Create account
          </Link>
        </Text>

        <Paper withBorder shadow="md" p={30} mt={30} radius="md">
          <form
            onSubmit={form.onSubmit((values) => {
              // console.log(values);
              const email = values.email;
              const password = values.password;
              login({ email, password });
              // dispatch(login({ email, password }));
              // user && console.log("ok");
              // router.push("/");
              user || error
                ? setLoading(false)
                : !user && !error
                ? setLoading(true)
                : "";
            })}
          >
            <TextInput
              label="Email"
              placeholder="you@mantine.dev"
              {...form.getInputProps("email")}
            />
            <PasswordInput
              label="Password"
              placeholder="Your password"
              mt="md"
              {...form.getInputProps("password")}
            />
            <Group position="apart" mt="lg">
              <Link href="/account/forgot-password" className={styles.anchor}>
                Forgot password?
              </Link>
            </Group>
            <Button type="submit" fullWidth mt="xl">
              Sign in
            </Button>
          </form>
          {error ? (
            <p className={styles.error}>{error}</p>
          ) : loading ? (
            <p className={styles.loading}>Requesting...</p>
          ) : (
            ""
          )}
        </Paper>
      </Container>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const resolvedUrl = context.resolvedUrl;
  return {
    props: {
      resolvedUrl,
    },
  };
};
