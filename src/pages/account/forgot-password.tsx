import Head from "next/head";
import styles from "../../styles/login.module.scss";
import {
  TextInput,
  PasswordInput,
  Checkbox,
  Anchor,
  Paper,
  Title,
  Text,
  Container,
  Group,
  Button,
} from "@mantine/core";
import { GetServerSideProps } from "next";
import { useForm } from "@mantine/form";
import { useDispatch, useSelector, TypedUseSelectorHook } from "react-redux";
import { RootState } from "../../types/authType";
import { register } from "../../state/authSlice";
import { AppDispatch } from "../../state";
import Link from "next/link";
import { valueGetters } from "@mantine/core/lib/Box/style-system-props/value-getters/value-getters";
import { API_URL } from "../../config";
import { StringDecoder } from "string_decoder";

export const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;

export default function ForgotPassword() {
  const dispatch: AppDispatch = useDispatch();
  // const dispatch = useDispatch();
  // 分割代入
  const { user, error, token } = useTypedSelector((state) => state.auth);

  const form = useForm({
    initialValues: {
      email: "",
    },

    validate: {
      email: (val) => {
        if (/^\S+@\S+$/.test(val)) {
          return null;
        } else if (val.length === 0) {
          return "Please input email";
        } else {
          return "Invalid email";
        }
      },
    },
  });

  const onSubmitHandler = async (e: string) => {
    try {
      const res = await fetch(`${API_URL}/auth/forgot-password`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          // data: values.email,
          data: e,
          // url: "https://localhost:3000/reset-password",
        }),
      });

      const data = res.json();
      if (res.ok) {
        alert("Project created!");
      } else {
        // console.log(data.error.message);
      }
    } catch (error) {
      console.log("something went wrong");
    }
  };

  return (
    <>
      <Head>
        <title>Forgot Password</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container className={styles.center} size={420}>
        <Title
          align="center"
          sx={(theme) => ({
            fontFamily: `Greycliff CF, ${theme.fontFamily}`,
            fontWeight: 900,
          })}
        >
          Forgot Password?
        </Title>
        <Text color="dimmed" size="sm" align="center" mt={5}>
          {/* Already have an account?{" "} */}
          <Link href="/account/login" className={styles.anchor}>
            Return to Login
          </Link>
        </Text>

        <Paper withBorder shadow="md" p={30} mt={30} radius="md">
          <Text color="dimmed" size="sm" align="center" mt={5}>
            Please send us your email address to reset your password.
          </Text>
          <form
            onSubmit={form.onSubmit((values) => {
              // console.log(values);
              const email = values.email;
              // dispatch(register({ username, email, password }));
              onSubmitHandler(email);
            })}
          >
            <TextInput
              mt="md"
              label="Email"
              placeholder="you@mantine.dev"
              {...form.getInputProps("email")}
            />
            <Group position="apart" mt="lg">
              {/* <Checkbox label="Remember me" sx={{ lineHeight: 1 }} /> */}
              {/* <Anchor<"a">
                onClick={(event) => event.preventDefault()}
                href="#"
                size="sm"
              >
                Forgot password?
              </Anchor> */}
            </Group>
            <Button type="submit" fullWidth mt="xl">
              Send Email
            </Button>
          </form>
          {error && <p className={styles.error}>{error}</p>}
        </Paper>
      </Container>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const resolvedUrl = context.resolvedUrl;
  return {
    props: {
      resolvedUrl,
    },
  };
};
